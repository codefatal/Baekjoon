import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.*;

public class Main {
	static Map<Integer, Integer> mapN = new HashMap<>();
	static List<Integer> arrM = new ArrayList<>();
	static List<Integer> keySet;

    public static void main(String[] args) throws NumberFormatException, IOException {
    	BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int n = Integer.parseInt(bf.readLine());
		StringTokenizer numN = new StringTokenizer(bf.readLine());
		int nn = 0;
		for(int i=0; i<n; i++) {
			nn = Integer.parseInt(numN.nextToken());
			if(mapN.get(nn)==null) {
				mapN.put(nn, 1);
			} else {
				mapN.put(nn, mapN.get(nn)+1);
			}
		}
		int m = Integer.parseInt(bf.readLine());
		StringTokenizer numM = new StringTokenizer(bf.readLine());
		for(int i=0; i<m; i++) {
			arrM.add(Integer.parseInt(numM.nextToken()));
		}
		
		keySet = new ArrayList<>(mapN.keySet());
        // 키 값으로 오름차순 정렬
        Collections.sort(keySet);
		List<Integer> result = new ArrayList<>();
		
		for(int i=0; i<m; i++) {
			result.add(binarySearch(arrM.get(i), 0, keySet.size()-1));
		}
		
		for(int k=0; k<result.size()-1; k++) {
			bw.write(result.get(k)+" ");
		}
		bw.write(result.get(result.size()-1)+"");
        bw.close();
    }
    
    static int binarySearch(int key, int low, int high) {
		int mid;
		
		while(low <= high) {
			mid = (low + high) / 2;
			
			if(key == keySet.get(mid)) {
				return mapN.get(key);
			} else if(key < keySet.get(mid)) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
		
		return 0;
	}
    
}
